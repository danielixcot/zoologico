@page "/editar-ave/{volar}"
@inject HttpClient http
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
<h3>Ingrese las Aves</h3>

<EditForm Model="@aves" OnValidSubmit="@Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="Nombre">Nombre del animal</label>
        <InputText id="Nombre" @bind-Value="aves.Nombre" class="form-control" />
        <ValidationMessage For="() => aves.Nombre" />
    </div>
    <div class="form-group">
        <label for="Especie">Especie del animal</label>
        <InputText id="Especie" @bind-Value="aves.Especie" class="form-control" />
        <ValidationMessage For="() => aves.Especie" />
    </div>
    <div class="form-group">
        <label for="Alimentacion">Alimentacion del animal</label>
        <InputText id="Alimentacion" @bind-Value="aves.Alimentacion" class="form-control" />
        <ValidationMessage For="() => aves.Alimentacion" />
    </div>
    <div class="form-group">
        <label for="Vida">Tiempo máximo de vida</label>
        <InputNumber id="Vida" @bind-Value="aves.Vida" class="form-control" />

    </div>
    <div class="form-group">
        <label for="Volar">Vuela la ave</label>
        <InputText id="Volar" @bind-Value="aves.Volar" class="form-control" />
        <ValidationMessage For="() => aves.Volar" />
    </div>
    <div class="form-group">
        <label for="Incubacion">Período de incubación(meses)</label>
        <InputNumber id="Incubacion" @bind-Value="aves.Incubacion" class="form-control" />

    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary">Guardar</button>
    </div>

</EditForm>

@code {
    [Parameter]
    public string volar { get; set; }

    private Aves aves = new Aves();
    List<Aves> aveses = new List<Aves>();

    protected async Task Guardar()
    {
        await localStorage.SetItemAsync("aveses", aveses);
        NavigationManager.NavigateTo("/ingreso-aves");
    }
    protected async Task Borrar(string Volar)
    {
        aveses.Remove(aveses.First(c => c.Volar == Volar));
        await localStorage.SetItemAsync("aveses", aveses);

    }
    protected override async Task OnInitializedAsync()
    {   //La primera vez que se corre poner en comentarios, pues como no existen datos
        //convierta la lista catedraticos en null
        aveses = await localStorage.GetItemAsync<List<Aves>>("aveses");
        aves = aveses.Find(c => c.Volar == volar);
    }
}
